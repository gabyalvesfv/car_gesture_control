#include <WiFi.h>
#include <esp_now.h>

typedef struct {
  int comando;
  int velocidade; 
} struct_message;

struct_message msg;
uint8_t receiverMAC[] = {0xA8, 0x42, 0xE3, 0x57, 0x8D, 0x2C}; // MAC do ESP receptor

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("üì§ Status do envio: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "‚úÖ Sucesso" : "‚ùå Falha");
}

void setup() {
  Serial.begin(115200); // Para debug
  delay(1000); // Esperar a Serial conectar

  Serial2.begin(9600, SERIAL_8N1, 16, 17); // Recebe do Arduino via GPIO16 (RX)

  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå Erro ao iniciar ESP-NOW");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, receiverMAC, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo)) {
    Serial.println("‚ùå Falha ao adicionar peer");
  } else {
    Serial.println("‚úÖ Peer adicionado com sucesso");
  }
}

void loop() {
  if (Serial2.available()) {
    String recebido = Serial2.readStringUntil('\n');

    int sep = recebido.indexOf(',');
    if (sep != -1) {
      msg.comando = recebido.substring(0, sep).toInt(); // Comando
      msg.velocidade = recebido.substring(sep + 1).toInt(); // Velocidade

      // Envia via ESP-NOW
      esp_now_send(receiverMAC, (uint8_t *)&msg, sizeof(msg));

      Serial.print("üì® Enviado via Wi-Fi: ");
      Serial.print(msg.comando);
      Serial.print(", ");
      Serial.println(msg.velocidade);
    }
  }
}
